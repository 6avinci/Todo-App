import 'package:flutter/material.dart';
import 'add_item_dialog.dart';
import 'to_do_item.dart';
import 'database.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

void main() => runApp(const MaterialApp(home: ToDo()));

class ToDo extends StatefulWidget {
  const ToDo({super.key});

  @override
  _ToDoState createState() => _ToDoState();
}

class _ToDoState extends State<ToDo> {
  late User user;
  late DatabaseService database;

  void addItem(String key) {
    database.setTodo(key, false);
    Navigator.pop(context);
  }

  void deleteItem(String key) {
    database.deleteTodo(key);
  }

  void toggleDone(String key, bool value) {
    database.setTodo(key, !value);
  }

  void newEntry() {
    showDialog<AlertDialog>(
        context: context,
        builder: (BuildContext context) {
          return AddItemDialog(addItem);
        }
    );
  }

  Future<void> connectToFirebase() async {

    // The Firebase toolbox for authenication
    final FirebaseAuth authenticate = FirebaseAuth.instance;

    // Session is persist for this device, uid will stay the same
    UserCredential result = await authenticate.signInAnonymously();

    user = result.user!;

    // get [DatabaseService] instance for current user
    database = DatabaseService(user.uid);

    if (!(await database.checkIfUserExists())) {
      database.setTodo('Todo anlegen', false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('To-Do-App'),
        backgroundColor: const Color.fromRGBO(35, 152, 185, 100),
      ),

      body: FutureBuilder(

        // Wait until [connectToFirebase] returns stream
          future: connectToFirebase(),

          builder: (BuildContext context, AsyncSnapshot<void> snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Center(child: CircularProgressIndicator());
            }
            else {
              // When stream exists, use Streambilder to wait for data
              return StreamBuilder<DocumentSnapshot>(

                stream: database.getTodos(),

                builder: (BuildContext context, AsyncSnapshot<DocumentSnapshot> snapshot) {
                  if (!snapshot.hasData) {
                    return const Center(child: CircularProgressIndicator());
                  }
                  else {
                    // resolve stream... Stream<DocumentSnapshot> -> DocumentSnapshot -> Map<String, bool>
                    Map<String, dynamic> items = snapshot.data?.data as Map<String, dynamic>;

                    return ListView.builder(
                        itemCount: items.length,
                        itemBuilder: (context, i) {
                          String key = items.keys.elementAt(i);
                          return ToDoItem(
                            key,
                            items[key],
                                () => deleteItem(key),
                                () => toggleDone(key, items[key]),
                          );
                        });
                  }
                },
              );
            }
          }),

      floatingActionButton: FloatingActionButton(
        onPressed: newEntry,
        backgroundColor: const Color.fromRGBO(35, 152, 185, 100),
        child: const Icon(Icons.add),
      ),
    );
  }
}









import 'package:cloud_firestore/cloud_firestore.dart';

class DatabaseService {

  final String userID;
  DatabaseService(this.userID);

  final CollectionReference userToDos =
  FirebaseFirestore.instance.collection('userToDos');

  Future setTodo(String item, bool value) async {
    return await userToDos
        .doc(userID)
        .set({item: value}, SetOptions(merge: true));
  }

  Future deleteTodo(String key) async {
    return await userToDos.doc(userID).update({
      key: FieldValue.delete(),
    });
  }

  Future checkIfUserExists() async {
    if ((await userToDos.doc(userID).get()).exists) {
      return true;
    } else {
      return false;
    }
  }

  Stream<DocumentSnapshot> getTodos() {
    return userToDos.doc(userID).snapshots();
  }
}










import 'package:flutter/material.dart';

class AddItemDialog extends StatefulWidget {
  final void Function(String txt) addItem;
  const AddItemDialog(this.addItem, {super.key});

  @override
  _AddItemDialogState createState() => _AddItemDialogState();
}

class _AddItemDialogState extends State<AddItemDialog> {
  final GlobalKey<FormState> formKey = GlobalKey();
  late String item;

  void save() {
    if (formKey.currentState!.validate()) {
      widget.addItem(item);
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      content: Form(
          key: formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: <Widget>[
              TextFormField(
                onChanged: (String txt) => item = txt,
                onFieldSubmitted: (String txt) => save(),
                validator: (v) {
                  if (v!.startsWith(" ") || v.isEmpty) {
                    return 'Bitte Aufgabe eintragen!';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 25),
              ElevatedButton(
                onPressed: save,
                child: const Text(
                  'Safe',
                  style: TextStyle(color: Color.fromRGBO(23, 152, 185, 100)),
                ),
              )
            ],
          )),
    );
  }
}










import 'package:flutter/material.dart';
import 'package:share_plus/share_plus.dart';

class DetailScreen extends StatelessWidget {

  const DetailScreen(this.title, this.done, {super.key});
  final String title;
  final bool done;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: done ? Colors.green : Colors.red,
      appBar: AppBar(
        title: const Text('Detail Screen'),
        backgroundColor: Colors.transparent,
      ),
      body: Padding(
        padding: const EdgeInsets.symmetric(vertical: 70),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: <Widget>[
            Expanded(
                child: Container(
                    padding: const EdgeInsets.all(20),
                    alignment: Alignment.center,
                    child: Text(
                      done ? 'Das hast du schon erledigt:' : 'Das musst du noch machen:',
                      style: const TextStyle(fontSize: 20, color: Colors.white), textAlign: TextAlign.center,))
            ),
            Expanded(
                child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 30),
                    alignment: Alignment.center,
                    child: Text(title, textAlign: TextAlign.center, style: const TextStyle(fontSize: 50, color: Colors.white)))
            ),
            Expanded(
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: <Widget>[
                  IconButton(
                    iconSize: 60,
                    onPressed: () {
                      String message;
                      if (done) {
                        message = 'Ich habe folgendes Todo erledigt: $title';
                      } else {
                        message = 'Das muss noch erledigt werden: $title';
                      }
                      Share.share(message);
                    },
                    icon: const Icon(Icons.share, color: Colors.white),
                  ),
                  IconButton(
                    iconSize: 60,
                    onPressed: () => Navigator.pop(context),
                    icon: Icon(done ? Icons.check : Icons.close, color: Colors.white),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}









import 'package:flutter/material.dart';
import 'detail_screen.dart';

class ToDoItem extends StatelessWidget {
  final String title;
  final bool done;
  final Function remove;
  final Function toggleDone;
  const ToDoItem(this.title, this.done, this.remove, this.toggleDone, {super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 22),
      child: ListTile(
        contentPadding: const EdgeInsets.symmetric(vertical: 8.0),
        leading: Checkbox(
          value: done,
          onChanged: (value) => toggleDone(),
          activeColor: Colors.greenAccent,
          checkColor: Colors.limeAccent,
        ),
        title: Text(
          title,
          style: TextStyle(
            fontSize: 18.0,
            fontWeight: FontWeight.w600,
            color: done ? const Color.fromRGBO(23, 152, 185, 100) : Colors.black54,
            decoration: done ? TextDecoration.lineThrough : TextDecoration.none,),
        ),
        trailing: IconButton(
          icon: const Icon(Icons.delete_outline),
          onPressed: () => remove(),
        ),
        onTap: () => Navigator.push<dynamic>(context, MaterialPageRoute<dynamic>(builder: (BuildContext context) => DetailScreen(title, done))),
      ),
    );
  }
}